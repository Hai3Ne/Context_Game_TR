using System;
public class ZJEncrypt
{
	static byte[] g_cbEncryptMap = new byte[256]
	{
		0xBE,0x5F,0x16,0xA2,0xBC,0x60,0x1A,0x51,0x4E,0x2C,0x83,0x2A,0x55,0xD1,0x8D,0xC3,
		0x35,0x05,0x17,0x85,0x7F,0x40,0x8B,0x91,0xFA,0xD5,0x3D,0x78,0xAD,0xA1,0x57,0xFE,
		0xC6,0x56,0x3C,0x49,0x67,0x5C,0xDD,0x88,0xF1,0xAA,0x45,0xF8,0xCF,0x22,0x77,0x4B,
		0x21,0x31,0xDA,0xDF,0x47,0x76,0x9E,0x80,0xAB,0xA4,0xC1,0x0B,0x97,0x1F,0xCE,0xCA,
		0xF9,0x72,0xA8,0xC9,0x18,0xA5,0xE2,0xD3,0xFC,0x92,0x8C,0xC7,0x96,0x08,0x81,0x4F,
		0xDE,0xFD,0x7D,0x61,0x44,0x03,0x3F,0x90,0xC4,0x4D,0x95,0x5A,0x33,0xE4,0x5E,0xA6,
		0x7A,0xF6,0x9D,0x3E,0x73,0x0A,0xF4,0x46,0xB6,0xD2,0x3A,0xC2,0xAE,0x09,0x64,0x53,
		0xBF,0xE6,0x6C,0xE5,0xB1,0x65,0xB5,0x2F,0x07,0x2D,0x87,0x6B,0xD7,0x7C,0xB3,0x9C,
		0x14,0xDC,0x26,0x4C,0xA0,0x02,0xA3,0xBD,0x24,0xB0,0x86,0x38,0xBA,0xD0,0x1E,0x23,
		0x52,0xEA,0x0D,0x2E,0x62,0xFF,0x54,0xF2,0xAC,0xA7,0xE7,0x98,0x28,0x99,0x6E,0x7E,
		0x7B,0x74,0x43,0x06,0xCC,0x13,0x69,0xCD,0x1B,0xED,0xEC,0x00,0x37,0x89,0xF3,0x50,
		0x32,0x70,0xD4,0xE9,0x01,0x9B,0xD9,0xCB,0x63,0xE0,0x71,0x11,0xB8,0xB4,0x20,0x27,
		0x58,0xAF,0x34,0x1D,0x12,0x36,0x41,0xFB,0x5D,0x9F,0xA9,0x29,0xEF,0x19,0x6D,0x48,
		0x93,0x9A,0x04,0x10,0x84,0x0C,0x8F,0x94,0x3B,0x79,0x25,0xF5,0x0E,0xE1,0xB2,0xE3,
		0xF7,0x2B,0xDB,0xC0,0x5B,0xEE,0xB9,0xBB,0x6F,0xF0,0x75,0x82,0xD6,0x8E,0x0F,0x66,
		0x30,0xD8,0x1C,0x42,0xEB,0x8A,0x4A,0x68,0x6A,0xC8,0xC5,0xB7,0x59,0x15,0x39,0xE8
	};

	//½âÃÜÓ³Éä
	static byte[] g_cbCrevasseMap = new byte[256]
	{
		0xAB,0xB4,0x85,0x55,0xD2,0x11,0xA3,0x78,0x4D,0x6D,0x65,0x3B,0xD5,0x92,0xDC,0xEE,
		0xD3,0xBB,0xC4,0xA5,0x80,0xFD,0x02,0x12,0x44,0xCD,0x06,0xA8,0xF2,0xC3,0x8E,0x3D,
		0xBE,0x30,0x2D,0x8F,0x88,0xDA,0x82,0xBF,0x9C,0xCB,0x0B,0xE1,0x09,0x79,0x93,0x77,
		0xF0,0x31,0xB0,0x5C,0xC2,0x10,0xC5,0xAC,0x8B,0xFE,0x6A,0xD8,0x22,0x1A,0x63,0x56,
		0x15,0xC6,0xF3,0xA2,0x54,0x2A,0x67,0x34,0xCF,0x23,0xF6,0x2F,0x83,0x59,0x08,0x4F,
		0xAF,0x07,0x90,0x6F,0x96,0x0C,0x21,0x1E,0xC0,0xFC,0x5B,0xE4,0x25,0xC8,0x5E,0x01,
		0x05,0x53,0x94,0xB8,0x6E,0x75,0xEF,0x24,0xF7,0xA6,0xF8,0x7B,0x72,0xCE,0x9E,0xE8,
		0xB1,0xBA,0x41,0x64,0xA1,0xEA,0x35,0x2E,0x1B,0xD9,0x60,0xA0,0x7D,0x52,0x9F,0x14,
		0x37,0x4E,0xEB,0x0A,0xD4,0x13,0x8A,0x7A,0x27,0xAD,0xF5,0x16,0x4A,0x0E,0xED,0xD6,
		0x57,0x17,0x49,0xD0,0xD7,0x5A,0x4C,0x3C,0x9B,0x9D,0xD1,0xB5,0x7F,0x62,0x36,0xC9,
		0x84,0x1D,0x03,0x86,0x39,0x45,0x5F,0x99,0x42,0xCA,0x29,0x38,0x98,0x1C,0x6C,0xC1,
		0x89,0x74,0xDE,0x7E,0xBD,0x76,0x68,0xFB,0xBC,0xE6,0x8C,0xE7,0x04,0x87,0x00,0x70,
		0xE3,0x3A,0x6B,0x0F,0x58,0xFA,0x20,0x4B,0xF9,0x43,0x3F,0xB7,0xA4,0xA7,0x3E,0x2C,
		0x8D,0x0D,0x69,0x47,0xB2,0x19,0xEC,0x7C,0xF1,0xB6,0x32,0xE2,0x81,0x26,0x50,0x33,
		0xB9,0xDD,0x46,0xDF,0x5D,0x73,0x71,0x9A,0xFF,0xB3,0x91,0xF4,0xAA,0xA9,0xE5,0xCC,
		0xE9,0x28,0x97,0xAE,0x66,0xDB,0x61,0xE0,0x2B,0x40,0x18,0xC7,0x48,0x51,0x1F,0x95
	};

	public static string  MapEncrypt(string pszSourceData, ushort wMaxCount)
	{
		int nLength = pszSourceData.Length*2;
		byte[] pcbSourceData = System.Text.Encoding.Unicode.GetBytes(pszSourceData);
		byte[] pcbEncrypData = new byte[nLength];

		for (int i=0; i < nLength; i++)
		{
			byte cbIndex = pcbSourceData[i];
			pcbEncrypData[i] = g_cbEncryptMap[cbIndex];
		}
		//pcbEncrypData [nLength - 1] = 0;
		return System.Text.Encoding.Unicode.GetString(pcbEncrypData);
	}

	public static string MapCrevasse(string pszEncrypData, string pszSourceData, ushort wMaxCount )
	{
		int nLength = pszEncrypData.Length;
		byte[] pcbEncrypData = System.Text.Encoding.Unicode.GetBytes(pszEncrypData);
		byte[] pcbSourceData = System.Text.Encoding.Unicode.GetBytes(pszSourceData);

		for (int i=0;i<nLength*2;i++)
		{
			byte cbIndex=pcbEncrypData[i];
			pcbSourceData[i] = g_cbCrevasseMap[cbIndex];
		}
		pcbSourceData [nLength] = 0;
		return System.Text.Encoding.Unicode.GetString(pcbSourceData);
	}

		public static bool MapEncrypt(char[] sourceData, char[] encryptData, ushort maxCount)
	{
#if DEAD_IOS
        return Encrypt.MapEncrypt(sourceData, encryptData, maxCount);
#else
		byte index;
		byte[] sourceByte = System.Text.Encoding.Unicode.GetBytes(sourceData);
		byte[] encryptByte = System.Text.Encoding.Unicode.GetBytes(encryptData);

		for (int i = 0; i < sourceByte.Length; i++)
		{
			index = (byte)sourceByte[i];
			encryptByte[i] = g_cbEncryptMap[index];
		}

		System.Buffer.BlockCopy(encryptByte, 0, encryptData, 0, encryptByte.Length);
		encryptData[sourceData.Length - 1] = (char)0;
		return true;
#endif
	}
}